import logging
import shutil
from pathlib import Path

from django.db import models

from backend.settings import ARCHIVES_ROOT
from timeline.models import Entry

logger = logging.getLogger(__name__)


def archive_path(instance: 'Archive', filename: str):
    return instance.root_path / f"archive{Path(filename).suffix}"


class Archive(models.Model):
    key = models.SlugField(max_length=80, allow_unicode=True, primary_key=True)
    description = models.TextField()
    date_processed = models.DateTimeField(null=True)
    archive_file = models.FileField(upload_to=archive_path)

    class Meta:
        abstract = True

    @property
    def root_path(self) -> Path:
        """
        The root under which all files for this archive are stored.
        """
        return ARCHIVES_ROOT / self.key

    @property
    def files_path(self) -> Path:
        """
        Extracted files are put here for further processing. These files will be deleted after processing.
        """
        return self.root_path / 'files'

    @property
    def entry_source(self):
        return f"archive/{self.key}"

    def extract_files(self):
        """
        Extracts compressed files from the archive for further processing
        """
        self.files_path.mkdir(parents=True, exist_ok=True)
        logger.info(f'Extracting archive "{self.key}"')
        shutil.unpack_archive(self.archive_file.path, self.files_path)

    def delete_extracted_files(self):
        """
        Deletes files extracted from the archive
        """
        if self.files_path.exists():
            shutil.rmtree(self.files_path)

    def delete_entries(self):
        """
        Deletes entries generated by this archive
        """
        deleted_count = Entry.objects.filter(source=self.entry_source).delete()[0]
        logger.info(f'Deleted {deleted_count} existing entries for archive "{self.key}"')

    def process(self):
        raise NotImplementedError

    def __str__(self):
        return self.key
