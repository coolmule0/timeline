# Generated by Django 3.1.2 on 2021-05-02 09:36

from django.db import migrations
from django.db.transaction import atomic
from django.utils.text import slugify

from archive.models import GoogleTakeoutArchive, GpxArchive, JsonArchive, N26CsvArchive, TwitterArchive
from backup.models import RedditSource, TwitterSource, HackerNewsSource, FileSystemSource, RssSource, RsyncSource
from timeline.models import Entry


@atomic
def set_key(app, schema_editor):
    for s in RsyncSource.objects.all():
        for e in Entry.objects.filter(source=f"rsync/{s.id}"):
            e.source = s.entry_source
            e.save()

    for s in FileSystemSource.objects.all():
        if not s.key:
            s.key = slugify(s.path)[-80]
            s.save()
        for e in Entry.objects.filter(source=f"filesystem/{s.id}"):
            e.source = s.entry_source
            e.save()

    for s in RssSource.objects.all():
        if not s.key:
            s.key = slugify(s.feed_url)[:80]
            s.save()
        for e in Entry.objects.filter(source=f"rss/{s.id}"):
            e.source = s.entry_source
            e.save()

    for s in RedditSource.objects.all():
        if not s.key:
            s.key = s.reddit_username
            s.save()
        for e in Entry.objects.filter(source=f"reddit/{s.id}"):
            e.source = s.entry_source
            e.save()

    for s in TwitterSource.objects.all():
        if not s.key:
            s.key = s.twitter_username
            s.save()
        for e in Entry.objects.filter(source=f"twitter/{s.id}"):
            e.source = s.entry_source
            e.save()

    for s in HackerNewsSource.objects.all():
        if not s.key:
            s.key = s.hackernews_username
            s.save()
        for e in Entry.objects.filter(source=f"hackernews/{s.id}"):
            e.source = s.entry_source
            e.save()

    for a in GpxArchive.objects.all():
        for e in Entry.objects.filter(source=f"archive/gpx/{a.key}"):
            e.source = s.entry_source
            e.save()

    for a in JsonArchive.objects.all():
        for e in Entry.objects.filter(source=f"archive/json/{a.key}"):
            e.source = s.entry_source
            e.save()

    for a in N26CsvArchive.objects.all():
        for e in Entry.objects.filter(source=f"archive/n26/{a.key}"):
            e.source = s.entry_source
            e.save()

    for a in TwitterArchive.objects.all():
        for e in Entry.objects.filter(source=f"archive/twitter/{a.key}"):
            e.source = s.entry_source
            e.save()

    for a in GoogleTakeoutArchive.objects.all():
        for e in Entry.objects.filter(source=f"archive/google/{a.key}"):
            e.source = s.entry_source
            e.save()


class Migration(migrations.Migration):

    dependencies = [
        ('backup', '0014_auto_20210502_0933'),
    ]

    operations = [
        migrations.RunPython(set_key),
    ]

