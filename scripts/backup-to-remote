#!/usr/bin/env python3
import argparse
import logging
import os
import subprocess
import sys

default_log_file = '/var/log/rsync-backup.log'

logger = logging.getLogger(__name__)
log_handler = logging.StreamHandler(sys.stdout)
log_handler.setLevel(logging.INFO)
logger.addHandler(log_handler)
logger.setLevel(logging.INFO)

arg_parser = argparse.ArgumentParser(description='Backup local files to a remote host using rsync. Respects a .rsyncignore file.')
arg_parser.add_argument(
    '-p', '--port',
    default=22,
    help='SSH port on remote host',
    type=int,
)
arg_parser.add_argument(
    '-u', '--user',
    help='SSH user on remote host',
    required=True,
    type=str,
)
arg_parser.add_argument(
    '-H', '--host',
    help='Remote hostname',
    required=True,
    type=str,
)
arg_parser.add_argument(
    '-o', '--log-file',
    default=default_log_file,
    dest="log_path",
    help=f'Default value is {default_log_file}',
    type=str,
)
arg_parser.add_argument(
    'source_dir',
    help='The source directory to back up', 
    type=str,
)
arg_parser.add_argument(
    'destination_dir',
    help='The destination directory on the remote host, relative to the backups root',
    type=str,
)
args = arg_parser.parse_args()

# Create log file directory
log_path = os.path.abspath(args.log_path.strip().rstrip('/'))
os.makedirs(os.path.dirname(log_path), exist_ok=True)
log_file = open(log_path, "w")

# Sanitise and check source/destination directories
source_dir = args.source_dir.strip().rstrip('/') + '/'
assert os.path.isdir(source_dir)

destination_dir = args.destination_dir.strip().strip('/')  # Always a relative path
destination_path = f"{args.user}@{args.host}:~/{destination_dir}"

logger.info(f'Backing up to {destination_path}...')

# Run the backup
rsync_command = [
    "rsync",
    "-avz",
    "--stats",
    "--delete",
    "--rsync-path", f'mkdir -p "{destination_dir}" && rsync',  # Creates the destination dir
    "-e", f"ssh -p {args.port}",
    "--filter", ":- .rsyncignore",
    source_dir,
    destination_path,
]
exit_code = subprocess.call(rsync_command, stdout=log_file, stderr=log_file)

# Report the results
if exit_code == 0:
    logger.info(f"Rsync backup successful. The rsync log is at {log_path}")
else:
    logger.error(f"Rsync backup failed with exit code {exit_code}. The rsync log is at {log_path}")

sys.exit(exit_code)