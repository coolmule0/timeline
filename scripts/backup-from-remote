#!/usr/bin/env python3
from datetime import datetime
import argparse
import logging
import os
import subprocess
import sys

default_log_file = '/var/log/rsync-backup.log'

logger = logging.getLogger(__name__)
log_handler = logging.StreamHandler(sys.stdout)
log_handler.setLevel(logging.INFO)
logger.addHandler(log_handler)
logger.setLevel(logging.INFO)

arg_parser = argparse.ArgumentParser(description='Incrementally backup a remote host using rsync.')
arg_parser.add_argument(
    '-p', '--port',
    default=22,
    help='SSH port on remote host',
    type=int,
)
arg_parser.add_argument(
    '-u', '--user',
    help='SSH user on remote host',
    required=True,
    type=str,
)
arg_parser.add_argument(
    '-H', '--host',
    help='Remote hostname',
    required=True,
    type=str,
)
arg_parser.add_argument(
    '-o', '--log-file',
    default=default_log_file,
    dest="log_path",
    help=f'Default value is {default_log_file}',
    type=str,
)
arg_parser.add_argument(
    'source_dir',
    help='The source directory on the remote host',
    type=str,
)
arg_parser.add_argument(
    'destination_dir',
    help='The destination directory on the local host',
    type=str,
)
args = arg_parser.parse_args()

# Create log file directory
log_path = os.path.abspath(args.log_path.strip().rstrip('/'))
os.makedirs(os.path.dirname(log_path), exist_ok=True)
log_file = open(log_path, "w")

# Sanitise and check source/destination directories
source_dir = args.source_dir.strip().rstrip('/') + '/'
source_path = f"{args.user}@{args.host}:{source_dir}"

destination_dir = os.path.abspath(args.destination_dir.strip().strip('/'))
assert os.path.isdir(destination_dir)

# Setup incremental backup directory structure
current_date = datetime.utcnow().strftime("%Y-%m-%dT%H%M%SZ")
latest_backup_path = os.path.join(destination_dir, 'latest')
current_backup_path = os.path.join(destination_dir, current_date)

os.makedirs(current_backup_path, exist_ok=True)

logger.info(f'Rsyncing remote directory to {current_backup_path}...')

# Run the backup
rsync_command = [
    "rsync",
    "-avz",
    "--stats",
    "--delete",
    "-e", f"ssh -p {args.port}",
    "--filter", ":- .rsyncignore",
    "--link-dest", latest_backup_path,
    source_path,
    current_backup_path,
]
exit_code = subprocess.call(rsync_command, stdout=log_file, stderr=log_file)

# Report the results
if exit_code == 0:
    logger.info(f"Rsync backup successful. The rsync log is at {log_path}")
    os.unlink(latest_backup_path)
    os.symlink(current_backup_path, latest_backup_path, target_is_directory=True)
    logger.info(f"{latest_backup_path} now points to latest backup")
else:
    logger.error(f"Rsync backup failed with exit code {exit_code}. The rsync log is at {log_path}")

sys.exit(exit_code)